# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow is meant for as a basic CI run covering the most-important features
# and default Java version. It is meant to run before a PullRequest is merged.

name: "Flink CI Template"



on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      jdk_version:
        required: true
        type: number
    secrets:
      s3_bucket:
        required: true
      s3_access_key:
        required: true
      s3_secret_key:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug - List files
        run: ls -la /__w/flink/flink/ || echo "Directory not found"

      - name: Ensure target directory exists
        run: mkdir -p /root/flink

      - name: Move files if they exist
        run: |
          shopt -s nullglob
          mv /__w/flink/flink/* /root/flink/ 2>/dev/null || echo "No files to move"
          mv /__w/flink/flink/.scalafmt.conf /root/flink/ 2>/dev/null || echo ".scalafmt.conf not found"
          mv /__w/flink/flink/.mvn /root/flink/ 2>/dev/null || echo ".mvn directory not found"

      - name: Set up Java ${{ inputs.jdk_version }.tostring}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.jdk_version }.tostring}

      - name: Build project
        run: mvn clean package ${{ inputs.environment }}
